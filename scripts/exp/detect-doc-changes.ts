/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import simpleGit from 'simple-git/promise';
import { spawn } from 'child-process-promise';
import * as tmp from 'tmp';

/**
 * This function is meant to be run in CI to detect if the PR contains documentation changes.
 * If it does, assign tech writers to the PR automatically
 */
async function detectDocChange(baseSha: string, headSha: string) {
  const tmpDir = tmp.dirSync().name;
  console.log('tmpDir is', tmpDir);
  // clone repo to the tmpDir
  await spawn(
    'git',
    ['clone', 'https://github.com/firebase/firebase-js-sdk.git', tmpDir],
    { stdio: 'inherit' }
  );

  const git = simpleGit(tmpDir);

  // generate reference docs using the baseSha
  await git.checkout(baseSha);
  await spawn('yarn', [], { cwd: tmpDir, stdio: 'inherit' });
  await spawn('yarn', ['docgen:exp'], { cwd: tmpDir, stdio: 'inherit' });

  // revert yarn.lock, so we can checkout the headSha without conflict.
  await git.checkout('yarn.lock');
  // stash changes, so we can checkout the headSha without conflict.
  await git.stash();

  // generate reference docs using the headSha
  await git.checkout(headSha);
  await spawn('yarn', [], { cwd: tmpDir, stdio: 'inherit' });

  // stage the docs generated by baseSha, so we can use git diff to tell if any docs are different in the headSha
  await git.stash(['pop']);
  await git.add('*');
  await spawn('yarn', ['docgen:exp'], { cwd: tmpDir, stdio: 'inherit' });

  // check if any file is changed.
  const diff = await git.diff();
  // check if new files are created.
  const untracked = await git.raw([
    'ls-files',
    '-o',
    '--directory',
    '--exclude-standard'
  ]);

  // assign tech writers if there are doc changes.
  if (!!diff || !!untracked) {
    console.log(
      'doc changes detected. Assigning tech writers to PR',
      diff,
      '@@@@@@@@@',
      untracked
    );
  } else {
    console.log('no doc changes detected');
  }
}
// find merge base

// generate reference docs for the merge base

// generate reference docs for the current PR

// any changes?

// const headSha = process.env.GITHUB_PULL_REQUEST_HEAD_SHA;
// const mergeBaseSha = process.env.GITHUB_PULL_REQUEST_BASE_SHA;

// if (!headSha || !mergeBaseSha) {
//     console.log('No merge base or head found. Is it not a PR?');
//     process.exit(1);
// }

// detectDocChange(mergeBaseSha, headSha);
detectDocChange(
  'b97dd4e1d366ade504703f73628bcd1920db434b',
  '57f19127cd8f64be9a59209eacc45b2814edc2f7'
);
